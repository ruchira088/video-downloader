---
- hosts: localhost
  connection: local

  vars:

  tasks:
    - name: Gather git information
      import_tasks: tasks/git-info.yml

    - set_fact:
        k8s_vars:
          production:
            namespace: video-downloader-back-end
            hostname: api.video.home.ruchij.com
            pgadmin_hostname: pgadmin.video.home.ruchij.com
            host_video_folder: /mnt/Data/Videos
            host_image_folder: /home/ruchira/Images
          development:
            namespace: video-downloader-back-end-{{ git_branch }}
            hostname: api.{{ git_branch }}.video.home.ruchij.com
            pgadmin_hostname: pgadmin.{{ git_branch }}.video.home.ruchij.com
            host_video_folder: /home/ruchira/video-downloader/videos
            host_image_folder: /home/ruchira/video-downloader/images

    - set_fact:
        namespace: "{{ k8s_vars[env].namespace }}"
        hostname: "{{ k8s_vars[env].hostname }}"
        pgadmin_hostname: "{{ k8s_vars[env].pgadmin_hostname }}"
        host_video_folder: "{{ k8s_vars[env].host_video_folder }}"
        host_image_folder: "{{ k8s_vars[env].host_image_folder }}"

    - name: Render K8s resource files
      import_tasks: tasks/k8s-resource-files.yml

    - name: Set kube_config
      import_tasks: tasks/k8s-config.yml

    - name: Deploy K8s resources
      block:
        - name: Create Namespace
          command: kubectl apply -f k8s-output/Namespace.yaml --kubeconfig k8s-output/kubeconfig

        - name: Deploy Helm charts
          block:
            - name: Add Bitnami Helm charts repository
              command: helm repo add bitnami https://charts.bitnami.com/bitnami

            - name: Deploy PostgreSQL
              block:
                - name: Deploy database
                  block:
                    - name: Check Postgresql service in K8s
                      k8s_info:
                        kind: Service
                        namespace: "{{ namespace }}"
                        name: postgresql
                        kubeconfig: k8s-output/kubeconfig
                      register: postgresql_output

                    - name: Install Postgres Helm chart
                      shell: |
                        KUBECONFIG=k8s-output/kubeconfig helm install postgresql \
                          --set postgresqlUsername="{{ secrets.database_user }}" \
                          --set postgresqlPassword="{{ secrets.database_password }}" \
                          --set postgresqlDatabase=video-downloader \
                          --namespace {{ namespace }} \
                          bitnami/postgresql
                      when: postgresql_output.resources | length == 0

                - name: Deploy pgadmin
                  block:
                    - name: Create ConfigMap
                      command: kubectl apply -f k8s-output/pgadmin/ConfigMap.yaml --kubeconfig k8s-output/kubeconfig

                    - name: Create Secrets
                      command: kubectl apply -f k8s-output/pgadmin/Secrets.yaml --kubeconfig k8s-output/kubeconfig

                    - name: Deploy application
                      command: kubectl apply -f k8s-output/pgadmin --kubeconfig k8s-output/kubeconfig

            - name: Deploy Redis Helm chart
              block:
                - name: Check Redis service in K8s
                  k8s_info:
                    kind: Service
                    namespace: "{{ namespace }}"
                    name: redis-master
                    kubeconfig: k8s-output/kubeconfig
                  register: redis_output

                - name: Install Redis Helm chart
                  shell: |
                    KUBECONFIG=k8s-output/kubeconfig helm install redis \
                    --set password="{{ secrets.redis_password }}" \
                    --set cluster.enabled=false \
                    --namespace {{ namespace }} \
                    bitnami/redis
                  when: redis_output.resources | length == 0

        - name: Deploy DB migration
          block:
            - name: Create ConfigMap
              command: kubectl apply -f k8s-output/db-migration/ConfigMap.yaml --kubeconfig k8s-output/kubeconfig

            - name: Create Secrets
              command: kubectl apply -f k8s-output/db-migration/Secrets.yaml --kubeconfig k8s-output/kubeconfig

            - name: Deploy Job
              command: kubectl apply -f k8s-output/db-migration --kubeconfig k8s-output/kubeconfig

            - name: Wait Job to complete
              command: kubectl wait --for=condition=complete job/database-migration-job-{{ git_commit }} --kubeconfig k8s-output/kubeconfig -n {{ namespace }} --timeout=120s

        - name: Deploy api
          block:
            - name: Create ConfigMap
              command: kubectl apply -f k8s-output/api/ConfigMap.yaml --kubeconfig k8s-output/kubeconfig

            - name: Create Secrets
              command: kubectl apply -f k8s-output/api/Secrets.yaml --kubeconfig k8s-output/kubeconfig

            - name: Deploy application
              command: kubectl apply -f k8s-output/api --kubeconfig k8s-output/kubeconfig

        - name: Deploy batch
          block:
            - name: Create ConfigMap
              command: kubectl apply -f k8s-output/batch/ConfigMap.yaml --kubeconfig k8s-output/kubeconfig

            - name: Create Secrets
              command: kubectl apply -f k8s-output/batch/Secrets.yaml --kubeconfig k8s-output/kubeconfig

            - name: Deploy application
              command: kubectl apply -f k8s-output/batch --kubeconfig k8s-output/kubeconfig

        - name: Wait for successful api deployment
          command: kubectl rollout status deployment api-deployment --kubeconfig k8s-output/kubeconfig -n {{ namespace }}

        - name: Wait for successful batch deployment
          command: kubectl rollout status deployment batch-deployment --kubeconfig k8s-output/kubeconfig -n {{ namespace }}

    - name: Clean up output directory
      file:
        path: k8s-output
        state: absent
