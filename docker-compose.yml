version: "3.8"

services:
  load-balancer:
    image: nginx:stable-alpine
    healthcheck:
      test: "/opt/scripts/wait-for.sh -t 3 localhost:443"
      start_period: 5s
      interval: 10s
      timeout: 5s
    depends_on:
      api-1:
        condition: service_healthy
      api-2:
        condition: service_healthy
      api-3:
        condition: service_healthy
      spa-renderer:
        condition: service_healthy
      front-end-1:
        condition: service_healthy
      front-end-2:
        condition: service_healthy
      front-end-3:
        condition: service_healthy
      fallback-api:
        condition: service_healthy
    ports:
      - 443:443
      - 80:80
    volumes:
      - "./nginx/ssl:/etc/ssl"
      - "./nginx/default.conf:/etc/nginx/conf.d/default.conf"
      - "./docker-compose/scripts:/opt/scripts"

  api-1: &api-app
    image: ghcr.io/ruchira088/video-downloader-api:dev
    healthcheck:
      test: "/opt/scripts/wait-for-it.sh localhost:8000"
      start_period: 10s
      interval: 10s
      timeout: 5s
    depends_on:
      postgres-main:
        condition: service_healthy
      migration-application:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      kafka-broker:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
      spa-renderer:
        condition: service_healthy
    volumes:
      - "./videos:/opt/videos"
      - "./images:/opt/images"
      - "./api/src/main/resources/logback.xml:/opt/data/logback.xml"
      - "./docker-compose/scripts:/opt/scripts"
    environment:
      DATABASE_URL: "jdbc:postgresql://postgres-main:5432/video-downloader"
      DATABASE_USER: "admin"
      DATABASE_PASSWORD: "password"
      REDIS_HOSTNAME: "redis"
      REDIS_PORT: "6379"
      REDIS_PASSWORD: "redis-password"
      KAFKA_BROKERS: "kafka-broker:9092"
      SCHEMA_REGISTRY: "http://schema-registry:8081"
      SPA_SITE_RENDERER: "http://spa-renderer:8000"
      FALLBACK_API_URL: "http://fallback-api:8080"
      FALLBACK_API_BEARER_TOKEN: "my-secret-token"
      VIDEO_FOLDER: "/opt/videos"
      IMAGE_FOLDER: "/opt/images"
      FALLBACK_API_POLL_INTERVAL: "30 seconds"

  api-2:
    *api-app

  api-3:
    *api-app

  batch-1: &batch-app
    image: ghcr.io/ruchira088/video-downloader-batch:dev
    depends_on:
      postgres-main:
        condition: service_healthy
      migration-application:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      kafka-broker:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
      spa-renderer:
        condition: service_healthy
    volumes:
      - "./videos:/opt/videos"
      - "./images:/opt/images"
      - "./batch/src/main/resources/logback.xml:/opt/data/logback.xml"
    environment:
      DATABASE_URL: "jdbc:postgresql://postgres-main:5432/video-downloader"
      DATABASE_USER: "admin"
      DATABASE_PASSWORD: "password"
      REDIS_HOSTNAME: "redis"
      REDIS_PORT: "6379"
      REDIS_PASSWORD: "redis-password"
      KAFKA_BROKERS: "kafka-broker:9092"
      SCHEMA_REGISTRY: "http://schema-registry:8081"
      SPA_SITE_RENDERER: "http://spa-renderer:8000"
      VIDEO_FOLDER: "/opt/videos"
      IMAGE_FOLDER: "/opt/images"

  batch-2:
    *batch-app

  batch-3:
    *batch-app

  spa-renderer:
    image: ghcr.io/ruchira088/video-downloader-spa-renderer:dev
    healthcheck:
      test: "/opt/scripts/wait-for.sh -t 3 localhost:8000"
      start_period: 10s
      interval: 10s
      timeout: 5s
    volumes:
      - "./docker-compose/scripts:/opt/scripts"

  fallback-api:
    image: ghcr.io/ruchira088/video-downloader-fallback-api:main
    healthcheck:
      test: "/opt/scripts/wait-for-it.sh localhost:8080"
      start_period: 10s
      interval: 10s
      timeout: 5s
    depends_on:
      postgres-secondary:
        condition: service_healthy
    volumes:
      - "./docker-compose/scripts:/opt/scripts"
    environment:
      ADMIN_BEARER_TOKEN: "my-secret-token"
      # The password is "top-secret"
      HASHED_ADMIN_PASSWORD: "$$2a$$10$$m5CQAirrrJKRqG3oalNSU.TUOn56v88isxMbNPi8cXXI35gY20hO."
      DATABASE_URL: "jdbc:postgresql://postgres-secondary:5432/fallback-api"
      DATABASE_USER: "admin"
      DATABASE_PASSWORD: "password"

  migration-application:
    image: ghcr.io/ruchira088/video-downloader-migration-application:dev
    depends_on:
      postgres-main:
        condition: service_healthy
    environment:
      DATABASE_URL: "jdbc:postgresql://postgres-main:5432/video-downloader"
      DATABASE_USER: "admin"
      DATABASE_PASSWORD: "password"
      # The password is "top-secret"
      HASHED_ADMIN_PASSWORD: "$$2a$$10$$m5CQAirrrJKRqG3oalNSU.TUOn56v88isxMbNPi8cXXI35gY20hO."

  postgres-main:
    image: postgres
#    command: ["postgres", "-c", "log_statement=all"]
    healthcheck:
      test: "pg_isready -U admin -d video-downloader"
      start_period: 10s
      interval: 10s
      timeout: 5s
    ports:
      - 5432:5432
    environment:
      POSTGRES_DB: "video-downloader"
      POSTGRES_USER: "admin"
      POSTGRES_PASSWORD: "password"

  postgres-secondary:
    image: postgres
    #    command: ["postgres", "-c", "log_statement=all"]
    healthcheck:
      test: "pg_isready -U admin -d fallback-api"
      start_period: 10s
      interval: 10s
      timeout: 5s
    ports:
      - 5431:5432
    environment:
      POSTGRES_DB: "fallback-api"
      POSTGRES_USER: "admin"
      POSTGRES_PASSWORD: "password"

  redis:
    image: redis
    command: "redis-server --requirepass redis-password"
    healthcheck:
      test: "redis-cli ping"
      start_period: 1s
      interval: 2s
      timeout: 1s
    ports:
      - 6379:6379

  zookeeper:
    image: zookeeper
    healthcheck:
      test: "/opt/scripts/wait-for.sh -t 3 zookeeper:2181"
      start_period: 5s
      interval: 5s
      timeout: 2s
    environment:
      ZOO_LOG4J_PROP: ERROR,CONSOLE
    volumes:
      - "./docker-compose/scripts:/opt/scripts"

  kafka-broker:
    image: wurstmeister/kafka
    healthcheck:
      test: "/opt/scripts/wait-for.sh -t 3 kafka-broker:9092"
      start_period: 5s
      interval: 5s
      timeout: 2s
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: kafka-broker
    volumes:
      - "./docker-compose/scripts:/opt/scripts"

  schema-registry:
    image: ghcr.io/arm64-compat/confluentinc/cp-schema-registry:7.1.1
    healthcheck:
      test: "/opt/scripts/wait-for.sh -t 3 schema-registry:8081"
      start_period: 5s
      interval: 5s
      timeout: 2s
    depends_on:
      kafka-broker:
        condition: service_healthy
    ports:
      - 8081:8081
    environment:
      SCHEMA_REGISTRY_HOST_NAME: "schema-registry"
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "kafka-broker:9092"
    volumes:
      - "./docker-compose/scripts:/opt/scripts"

  schema-registry-ui:
    image: landoop/schema-registry-ui
    healthcheck:
      test: "/opt/scripts/wait-for.sh -t 3 schema-registry-ui:8000"
      start_period: 10s
      interval: 10s
      timeout: 5s
    depends_on:
      schema-registry:
        condition: service_healthy
    ports:
      - 8000:8000
    environment:
      SCHEMAREGISTRY_URL: "http://schema-registry:8081"
      PROXY: "true"
    volumes:
      - "./docker-compose/scripts:/opt/scripts"

  front-end-1: &front-end
    image: ghcr.io/ruchira088/video-downloader-front-end:dev
    healthcheck:
      test: "/opt/scripts/wait-for.sh -t 3 localhost:80"
      start_period: 5s
      interval: 3s
      timeout: 2s
    volumes:
      - "./docker-compose/scripts:/opt/scripts"

  front-end-2: *front-end

  front-end-3: *front-end